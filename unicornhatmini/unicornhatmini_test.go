// Copyright 2018 The Periph Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

package unicornhatmini

import (
	"bytes"
	"errors"
	"image"
	"image/color"
	"testing"

	"periph.io/x/conn/v3/physic"
	"periph.io/x/conn/v3/spi"
	"periph.io/x/conn/v3/spi/spitest"
)

func TestNewFailsWhenConnectionToSpiFails(t *testing.T) {
	if dev, err := New(&spiFail{}); dev != nil || err == nil {
		t.Fatal()
	}
}

func TestNewReturnsDriverWithGoodSpi(t *testing.T) {
	if dev, err := New(spitest.NewRecordRaw(nil)); dev == nil || err != nil {
		t.Fatal()
	}
}

func TestStringIsDriverNameWidthHeight(t *testing.T) {
	expectedString := "UnicornHATMini{17, 7}"
	dev, _ := New(spitest.NewRecordRaw(nil))
	devString := dev.String()
	if devString != expectedString {
		t.Fatalf("expected: '%s', actual: '%s'", expectedString, devString)
	}
}

func TestHalt(t *testing.T) {
	var expectedAllBlack = []byte{
		0x72,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
	}
	buf := bytes.Buffer{}
	dev, _ := New(spitest.NewRecordRaw(&buf))
	if err := dev.Halt(); err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expectedAllBlack, buf.Bytes()) {
		t.Fatalf("%#v != %#v", expectedAllBlack, buf.Bytes())
	}
}

func TestColorModeIsNRGBA(t *testing.T) {
	dev, _ := New(spitest.NewRecordRaw(nil))

	if dev.ColorModel() != color.NRGBAModel {
		t.Fatal()
	}
}

func TestBoundsMatchDeviceSize(t *testing.T) {
	dev, _ := New(spitest.NewRecordRaw(nil))

	bounds := dev.Bounds()

	if bounds.Min.X != 0 {
		t.Errorf("Min x expected to be zero (actual: %d)", bounds.Min.X)
	}
	if bounds.Min.Y != 0 {
		t.Errorf("Min y expected to be zero (actual: %d)", bounds.Min.Y)
	}
	if bounds.Max.X != width {
		t.Errorf("Max x expected to be %d (actual: %d)", width, bounds.Max.X)
	}
	if bounds.Max.Y != height {
		t.Errorf("Max y expected to be %d (actual: %d)", height, bounds.Max.Y)
	}
}

func TestDrawWritesBlackImageToSpi(t *testing.T) {
	var expectedAllBlack = []byte{
		0x72,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
	}
	buf := bytes.Buffer{}
	dev, _ := New(spitest.NewRecordRaw(&buf))
	black := color.RGBA{0, 0, 0, 0}
	if err := dev.Draw(dev.Bounds(), &image.Uniform{black}, image.Point{}); err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expectedAllBlack, buf.Bytes()) {
		t.Fatalf("%#v != %#v", expectedAllBlack, buf.Bytes())
	}
}

func TestDrawWritesWhiteImageToSpi(t *testing.T) {
	var expectedAllWhite = []byte{
		0x72,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,

		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF,
	}
	buf := bytes.Buffer{}
	dev, _ := New(spitest.NewRecordRaw(&buf))
	white := color.RGBA{255, 255, 255, 255}
	if err := dev.Draw(dev.Bounds(), &image.Uniform{white}, image.Point{}); err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expectedAllWhite, buf.Bytes()) {
		t.Fatalf("%#v != %#v", expectedAllWhite, buf.Bytes())
	}
}

func TestDrawWritesSequenceImageToSpi(t *testing.T) {
	var expectedSequence = []byte{
		0x72,
		0x00, 0x02, 0x01, 0x03, 0x05, 0x04, 0x06, 0x08, 0x07, 0x09, 0x0b, 0x0a, 0x0c, 0x0e, 0x0d, 0x0f, 0x11, 0x10, 0x12, 0x14, 0x13, 0x15, 0x17, 0x16,
		0x18, 0x1a, 0x19, 0x1b, 0x1d, 0x1c, 0x1e, 0x20, 0x1f, 0x21, 0x23, 0x22, 0x24, 0x26, 0x25, 0x27, 0x29, 0x28, 0x2a, 0x2c, 0x2b, 0x2d, 0x2f, 0x2e,
		0x30, 0x32, 0x31,

		0x33, 0x35, 0x34, 0x36, 0x38, 0x37, 0x39, 0x3b, 0x3a, 0x3c, 0x3e, 0x3d, 0x3f, 0x41, 0x40, 0x42, 0x44, 0x43, 0x45, 0x47, 0x46, 0x48, 0x4a, 0x49,
		0x4b, 0x4d, 0x4c, 0x4e, 0x50, 0x4f, 0x51, 0x53, 0x52, 0x54, 0x56, 0x55, 0x57, 0x59, 0x58, 0x5a, 0x5c, 0x5b, 0x5d, 0x5f, 0x5e, 0x60, 0x62, 0x61,
		0x63, 0x65, 0x64,

		0x66, 0x68, 0x67, 0x69, 0x6b, 0x6a, 0x6c, 0x6e, 0x6d, 0x6f, 0x71, 0x70, 0x72, 0x74, 0x73, 0x75, 0x77, 0x76, 0x78, 0x7a, 0x79, 0x7b, 0x7d, 0x7c,
		0x7e, 0x80, 0x7f, 0x81, 0x83, 0x82, 0x84, 0x86, 0x85, 0x87, 0x89, 0x88, 0x8a, 0x8c, 0x8b, 0x8d, 0x8f, 0x8e, 0x90, 0x92, 0x91, 0x93, 0x95, 0x94,
		0x96, 0x98, 0x97,

		0x99, 0x9b, 0x9a, 0x9c, 0x9e, 0x9d, 0x9f, 0xa1, 0xa0, 0xa2, 0xa4, 0xa3, 0xa5, 0xa7, 0xa6, 0xa8, 0xaa, 0xa9, 0xab, 0xad, 0xac, 0xae, 0xb0, 0xaf,
		0xb1, 0xb3, 0xb2, 0xb4, 0xb6, 0xb5, 0xb7, 0xb9, 0xb8, 0xba, 0xbc, 0xbb, 0xbd, 0xbf, 0xbe, 0xc0, 0xc2, 0xc1, 0xc3, 0xc5, 0xc4, 0xc6, 0xc8, 0xc7,
		0xc9, 0xcb, 0xca,

		0xcc, 0xce, 0xcd, 0xcf, 0xd1, 0xd0, 0xd2, 0xd4, 0xd3, 0xd5, 0xd7, 0xd6, 0xd8, 0xda, 0xd9, 0xdb, 0xdd, 0xdc, 0xde, 0xe0, 0xdf, 0xe1, 0xe3, 0xe2,
		0xe4, 0xe6, 0xe5, 0xe7, 0xe9, 0xe8, 0xea, 0xec, 0xeb, 0xed, 0xef, 0xee, 0xf0, 0xf2, 0xf1, 0xf3, 0xf5, 0xf4, 0xf6, 0xf8, 0xf7, 0xf9, 0xfb, 0xfa,
		0xfc, 0xfe, 0xfd,

		0xff, 0x01, 0x00, 0x02, 0x04, 0x03, 0x05, 0x07, 0x06, 0x08, 0x0a, 0x09, 0x0b, 0x0d, 0x0c, 0x0e, 0x10, 0x0f, 0x11, 0x13, 0x12, 0x14, 0x16, 0x15,
		0x17, 0x19, 0x18, 0x1a, 0x1c, 0x1b, 0x1d, 0x1f, 0x1e, 0x20, 0x22, 0x21, 0x23, 0x25, 0x24, 0x26, 0x28, 0x27, 0x29, 0x2b, 0x2a, 0x2c, 0x2e, 0x2d,
		0x2f, 0x31, 0x30,

		0x32, 0x34, 0x33, 0x35, 0x37, 0x36, 0x38, 0x3a, 0x39, 0x3b, 0x3d, 0x3c, 0x3e, 0x40, 0x3f, 0x41, 0x43, 0x42, 0x44, 0x46, 0x45, 0x47, 0x49, 0x48,
		0x4a, 0x4c, 0x4b, 0x4d, 0x4f, 0x4e, 0x50, 0x52, 0x51, 0x53, 0x55, 0x54, 0x56, 0x58, 0x57, 0x59, 0x5b, 0x5a, 0x5c, 0x5e, 0x5d, 0x5f, 0x61, 0x60,
		0x62, 0x64, 0x63,
	}
	buf := bytes.Buffer{}
	dev, _ := New(spitest.NewRecordRaw(&buf))

	img := image.NewNRGBA(image.Rect(0, 0, width, height))
	var c uint8
	for y := 0; y < height; y++ {
		for x := 0; x < width; x++ {
			r := c
			c++
			if c > 255 {
				c = 0
			}
			// Blue is set before Green on purpose to avoid having a straight sequence.
			b := c
			c++
			if c > 255 {
				c = 0
			}
			g := c
			c++
			if c > 255 {
				c = 0
			}
			clr := color.RGBA{r, g, b, 255}
			img.Set(x, y, clr)
		}
	}
	if err := dev.Draw(dev.Bounds(), img, image.Point{}); err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expectedSequence, buf.Bytes()) {
		t.Fatalf("%#v != %#v", expectedSequence, buf.Bytes())
	}
}

func TestDrawSupportsPartialUpdates(t *testing.T) {
	var expectedWhiteSquare = []byte{
		0x72,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00,
	}
	buf := bytes.Buffer{}
	dev, _ := New(spitest.NewRecordRaw(&buf))
	white := color.RGBA{0xFF, 0xFF, 0xFF, 0xFF}
	if err := dev.Draw(image.Rect(0, 0, 3, 3), &image.Uniform{white}, image.Point{}); err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(expectedWhiteSquare, buf.Bytes()) {
		t.Fatalf("%#v != %#v", expectedWhiteSquare, buf.Bytes())
	}
}

type spiFail struct {
	spitest.Playback
}

func (s *spiFail) Connect(f physic.Frequency, mode spi.Mode, bits int) (spi.Conn, error) {
	return nil, errors.New("failing")
}
